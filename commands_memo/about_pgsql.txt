#
# The aim of this memo is to have in one place some useful commands about PostgreSQL
#        by Erwan 'Labynocle' Ben Souiden


# Server activity
#############################################################################

select state, count(*) from pg_stat_activity group by state;
select state, waiting, count(*) from pg_stat_activity group by state, waiting;

# Size
#############################################################################
# size of a table
select pg_size_pretty(pg_total_relation_size('TABLENAME'));

# size of all tables of the current db
SELECT
   relname as "Table",
   pg_size_pretty(pg_total_relation_size(relid)) As "Size",
   pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) as "External Size"
   FROM pg_catalog.pg_statio_user_tables ORDER BY pg_total_relation_size(relid) DESC;
   
# list all index of the current db with size, type and details
SELECT
  idx.indrelid :: REGCLASS AS table_name,
  i.relname                AS index_name,
  pg_size_pretty(pg_relation_size(quote_ident(i.relname)::text)) AS index_size,
  idx.indisunique          AS is_unique,
  idx.indisprimary         AS is_primary,
  am.amname                AS index_type,
  idx.indkey,
       ARRAY(
           SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)
           FROM
             generate_subscripts(idx.indkey, 1) AS k
           ORDER BY k
       ) AS index_keys,
  (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS is_functional
FROM pg_index AS idx
  JOIN pg_class AS i
    ON i.oid = idx.indexrelid
  JOIN pg_am AS am
    ON i.relam = am.oid
  JOIN pg_namespace AS NS ON i.relnamespace = NS.OID
  JOIN pg_user AS U ON i.relowner = U.usesysid
WHERE NOT nspname LIKE 'pg%' AND idx.indisprimary IS FALSE ORDER BY table_name;

# Vacuum
#############################################################################
# last vacuum and analyze on all tables from public
select relname, last_vacuum, last_analyze from pg_stat_all_tables where schemaname = 'public';

# pg_stat_statements
#############################################################################
# install the pg_stat_statements extension
create extension pg_stat_statements ;

#
#    The total time a query has occupied against your system in minutes
#    The average time it takes to run in milliseconds
#    The query itself

SELECT 
  (total_time / 1000 / 60) as total_minutes, 
  (total_time/calls) as average_time, 
  calls,
  query 
FROM pg_stat_statements 
ORDER BY 1 DESC 
LIMIT 100;





select relpages, relpages / reltuples, relpages / 80 from pg_class where oid = 'TABLENAME'::regclass;
select oid::regclass, relpages, reltuples, reltuples/relpages from pg_class where oid in ('TABLENAME01'::regclass, 'TABLENAME02'::regclass);

# PgRestore
#############################################################################
# restore only tables and data
${PGRESTORE_BIN} --list ${DUMP_FILE} | grep TABLE > ${DUMP_FILE_TABLE_ONLY}
[[ ${PIPESTATUS[0]} -ne 0 ]] && return 1
${PGRESTORE_BIN} -d ${DB_NAME} -U ${DB_NAME} -h ${PG_HOST} -p ${PG_PORT} -c --if-exist --use-list="${DUMP_FILE_TABLE_ONLY}" ${DUMP_FILE} 2>&1


# Useful queries to see if there are more seq scan than index scan
#############################################################################
# cf http://stackoverflow.com/questions/3318727/postgresql-index-usage-analysis/12818168#12818168
SELECT relname, seq_scan-idx_scan AS too_much_seq, case when seq_scan-idx_scan>0 THEN 'Missing Index?' ELSE 'OK' END, pg_relation_size(relname::regclass) AS rel_size, seq_scan, idx_scan
 FROM pg_stat_all_tables
 WHERE schemaname='public' AND pg_relation_size(relname::regclass)>80000 ORDER BY too_much_seq DESC;
